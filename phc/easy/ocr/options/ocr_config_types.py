# flake8: noqa
# generated by datamodel-codegen:
#   filename:  ocrConfig.json
#   timestamp: 2021-02-24T14:53:55+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, constr


class DenoiserSwitch(Enum):
    ON = "ON"
    OFF = "OFF"
    SMART = "SMART"


class ClassifierSwitch(Enum):
    OFF = "OFF"
    SEARCH = "SEARCH"
    ML = "ML"


class AnalyzeSwitch(Enum):
    OFF = "OFF"
    ON = "ON"
    PROJECT_DATA = "PROJECT_DATA"
    FULL = "FULL"


class AnalyzeConfidence(Enum):
    HIGH = "HIGH"
    STRONG = "STRONG"
    MODERATE = "MODERATE"
    LOW = "LOW"
    OFF = "OFF"


class SpellCheckerSwitch(Enum):
    OFF = "OFF"
    ON = "ON"


class ReportExtractionSwitch(Enum):
    OFF = "OFF"
    ON = "ON"


class Coding(BaseModel):
    code: str = Field(..., title="The code for the search term's coding")
    system: str = Field(..., title="The system for the search term's coding")
    display: str = Field(..., title="The display for the search term's coding")


class ResourceType(Enum):
    MedicationAdministration = "MedicationAdministration"
    Observation = "Observation"
    Procedure = "Procedure"
    Condition = "Condition"


class SearchTerm(BaseModel):
    term: str = Field(
        ...,
        examples=["Cancer", "Date of Birth"],
        title="The explicit term to search in the document for",
    )
    coding: Optional[Coding] = Field(
        None, title="The coding to associate with the search term"
    )
    resourceTypes: Optional[List[ResourceType]] = Field(
        None, title="The resource type(s) to associate with the search term"
    )


class SearchList(BaseModel):
    title: str = Field(..., title="Search List title")
    searchTerms: List[SearchTerm] = Field(
        ..., title="The terms of the search list"
    )


class SearchLists(BaseModel):
    lists: Optional[List[SearchList]] = Field(
        None, title="Configured lists of search terms"
    )


class Config(BaseModel):
    denoiserSwitch: Optional[DenoiserSwitch] = Field(
        None, title="Switch to control denoiser ON|OFF|SMART"
    )
    pathPrefix: Optional[str] = Field(
        None,
        title="Path prefix where output files will be written (in file-service)",
    )
    documentClassifier: Optional[str] = Field(
        None, title="Name of document classifier"
    )
    classifierSwitch: Optional[ClassifierSwitch] = Field(
        None, title="Switch to control classifier OFF|SEARCH|ML"
    )
    analyzeSwitch: Optional[AnalyzeSwitch] = Field(
        None, title="Switch to execute analyze engine on document ingestion"
    )
    analyzeConfidence: Optional[AnalyzeConfidence] = Field(
        None,
        title="Sliding toggle to determine confidence limit on comprehend results to filter out less relevant suggestions",
    )
    spellCheckerSwitch: Optional[SpellCheckerSwitch] = Field(
        None, title="Switch to execute spell checker on document ingestion"
    )
    reportExtractionSwitch: Optional[ReportExtractionSwitch] = Field(
        None, title="Switch to execute report extraction on document ingestion"
    )
    reviewStages: Optional[List[str]] = Field(
        None,
        title="Configurable stages a document goes through during a review process",
    )
    searchLists: Optional[SearchLists] = Field(
        None, title="Configured search sets to help navigate documents"
    )


class OcrConfigPayload(BaseModel):
    project: constr(
        regex=r"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-4[0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$",
        min_length=36,
        max_length=36,
    ) = Field(
        ...,
        examples=["e97e27d3-f553-432a-bde1-7ae3d3ba5078"],
        title="Project Id",
    )
    config: Config

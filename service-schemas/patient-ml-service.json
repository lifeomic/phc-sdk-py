{
  "openapi": "3.0.0",
  "info": {
    "title": "Patient ML",
    "description": "Enables training, evaluating, and deploying Machine Learning models on your data stored in the LifeOmic Platform.",
    "version": "171"
  },
  "components": {
    "schemas": {
      "MlProblemDefinitionBase": {
        "required": [],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "retrainEvery": {
            "description": "If provided, the model will automatically be retrained if this many milliseconds have passed since the last run. Models will not be retrained more frequently than once per day, and this policy is only checked once per day, so more than this many milliseconds may actually pass before the model is retrained.",
            "type": "number"
          }
        }
      },
      "LabelDefinitionBase": {
        "required": [
          "name",
          "description"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "id": {
            "description": "UUID uniquely identifying this label.",
            "type": "string"
          },
          "name": {
            "description": "The unique name of the label.",
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "LabelDefinition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LabelDefinitionBase"
          },
          {
            "required": [
              "id",
              "index"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "index": {
                "description": "The unique integer identifying this label, in the range [0,255]. It must never change during the life of the model because it is stored in training data as the label's identifier.",
                "type": "integer",
                "minimum": 0,
                "maximum": 255
              }
            }
          }
        ]
      },
      "LabelsDefinitionInput": {
        "required": [
          "labels"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelDefinitionBase"
            }
          }
        }
      },
      "LabelsDefinition": {
        "required": [
          "labels",
          "maxLabelIndex"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelDefinition"
            }
          },
          "maxLabelIndex": {
            "description": "The maximum index used by any label defined for this model over the life of the model. This field cannot be set by a user but is used to track what label indices have already been exhausted.",
            "type": "integer",
            "minimum": -1,
            "maximum": 255
          }
        }
      },
      "ClassificationProblemInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MlProblemDefinitionBase"
          },
          {
            "required": [
              "labelDefinition"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "labelDefinition": {
                "$ref": "#/components/schemas/LabelsDefinitionInput"
              }
            }
          }
        ]
      },
      "ClassificationProblem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MlProblemDefinitionBase"
          },
          {
            "required": [
              "labelDefinition"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "labelDefinition": {
                "$ref": "#/components/schemas/LabelsDefinition"
              }
            }
          }
        ]
      },
      "ImageSegmentationProblemBase": {
        "required": [
          "problemType",
          "trainingDataFilter"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "problemType": {
            "type": "string",
            "enum": [
              "imgSeg"
            ]
          },
          "trainingDataFilter": {
            "description": "Used to filter through patient data to identify image/mask pairs for model training.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/FhirCodesFilter"
              }
            ]
          }
        }
      },
      "ImageSegmentationProblemInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClassificationProblemInput"
          },
          {
            "$ref": "#/components/schemas/ImageSegmentationProblemBase"
          }
        ]
      },
      "ImageSegmentationProblem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClassificationProblem"
          },
          {
            "$ref": "#/components/schemas/ImageSegmentationProblemBase"
          }
        ]
      },
      "ImageClassificationProblemBase": {
        "required": [
          "problemType",
          "trainingDataFilter"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "problemType": {
            "type": "string",
            "enum": [
              "imgClf"
            ]
          },
          "trainingDataFilter": {
            "description": "Used to filter through patient data to identify the input images for the model.",
            "anyOf": [
              {
                "$ref": "#/components/schemas/FhirCodesFilter"
              }
            ]
          }
        }
      },
      "ImageClassificationProblemInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClassificationProblemInput"
          },
          {
            "$ref": "#/components/schemas/ImageClassificationProblemBase"
          }
        ]
      },
      "ImageClassificationProblem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ClassificationProblem"
          },
          {
            "$ref": "#/components/schemas/ImageClassificationProblemBase"
          }
        ]
      },
      "MlProblemDefinitionInput": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ImageSegmentationProblemInput"
          },
          {
            "$ref": "#/components/schemas/ImageClassificationProblemInput"
          }
        ]
      },
      "MlProblemDefinition": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ImageSegmentationProblem"
          },
          {
            "$ref": "#/components/schemas/ImageClassificationProblem"
          }
        ]
      },
      "ImageSegmentationArea": {
        "required": [
          "id",
          "rle"
        ],
        "additionalProperties": false,
        "description": "A run-length encoded (RLE) 4 channel color image, representing the mask for a single label.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The ID of the label this mask is for.",
            "type": "string"
          },
          "rle": {
            "description": "The run-length encoded mask; an array of 8-bit unsigned integers.",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "ImageSegmentationLabelData": {
        "required": [
          "labelType",
          "projectId",
          "height",
          "width",
          "areas"
        ],
        "additionalProperties": false,
        "description": "A raw image segmentation, in the format LabelStudio provides.",
        "type": "object",
        "properties": {
          "labelType": {
            "type": "string",
            "enum": [
              "imgSeg"
            ]
          },
          "projectId": {
            "description": "The ID of the LifeOmic project the label file is saved under.",
            "type": "string"
          },
          "height": {
            "description": "The height of the segmentation mask in pixels.",
            "type": "integer"
          },
          "width": {
            "description": "The width of the segmentation mask in pixels.",
            "type": "integer"
          },
          "areas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageSegmentationArea"
            }
          }
        }
      },
      "LabelFileData": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ImageSegmentationLabelData"
          }
        ]
      },
      "Tag": {
        "required": [
          "name",
          "value"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Tag"
        }
      },
      "LabelBase": {
        "required": [],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "isConfirmed": {
            "type": "boolean",
            "description": "A confirmed label is believed to be correct and may be used during training and evaluation."
          },
          "lastConfirmedBy": {
            "type": "string",
            "description": "The email address or other identifier of the user who last confirmed this label."
          },
          "updatedAt": {
            "description": "Timestamp for when the label was last updated or created expressed as milliseconds since the UTC epoch.",
            "type": "number"
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          }
        }
      },
      "ImageSegmentationLabel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LabelBase"
          },
          {
            "required": [
              "labelType",
              "mask"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "labelType": {
                "type": "string",
                "enum": [
                  "imgSeg"
                ]
              },
              "mask": {
                "required": [
                  "fileId"
                ],
                "additionalProperties": false,
                "type": "object",
                "description": "The fileId of an image containing per-pixel labels",
                "properties": {
                  "fileId": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ImageClassificationLabel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/LabelBase"
          },
          {
            "required": [
              "labelType",
              "classes"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "labelType": {
                "type": "string",
                "enum": [
                  "imgClf"
                ]
              },
              "classes": {
                "type": "array",
                "description": "An array of integers representing the class(es) of the image",
                "items": {
                  "type": "number"
                }
              }
            }
          }
        ]
      },
      "Label": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ImageSegmentationLabel"
          },
          {
            "$ref": "#/components/schemas/ImageClassificationLabel"
          }
        ]
      },
      "ExampleBase": {
        "required": [
          "id",
          "updatedAt"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "updatedAt": {
            "description": "Timestamp expressed as milliseconds since the UTC epoch.",
            "type": "number"
          }
        }
      },
      "ImageSegmentationExample": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExampleBase"
          },
          {
            "required": [
              "exampleType",
              "image"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "exampleType": {
                "type": "string",
                "enum": [
                  "imgSeg"
                ]
              },
              "image": {
                "required": [
                  "fileId"
                ],
                "additionalProperties": false,
                "type": "object",
                "properties": {
                  "fileId": {
                    "type": "string"
                  }
                }
              },
              "label": {
                "$ref": "#/components/schemas/ImageSegmentationLabel"
              }
            }
          }
        ]
      },
      "ImageClassificationExample": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExampleBase"
          },
          {
            "required": [
              "exampleType",
              "image"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "exampleType": {
                "type": "string",
                "enum": [
                  "imgClf"
                ]
              },
              "image": {
                "required": [
                  "fileId"
                ],
                "additionalProperties": false,
                "type": "object",
                "properties": {
                  "fileId": {
                    "type": "string"
                  }
                }
              },
              "label": {
                "$ref": "#/components/schemas/ImageClassificationLabel"
              }
            }
          }
        ]
      },
      "Example": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/ImageSegmentationExample"
          },
          {
            "$ref": "#/components/schemas/ImageClassificationExample"
          }
        ]
      },
      "FhirCodesFilter": {
        "required": [
          "filterType",
          "codes"
        ],
        "additionalProperties": false,
        "type": "object",
        "description": "Used to find FHIR resources containing a type code that equals any value in the codes array",
        "properties": {
          "filterType": {
            "type": "string",
            "enum": [
              "FhirCodesFilter"
            ]
          },
          "codes": {
            "type": "array",
            "minItems": 1,
            "maxItems": 10,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CategoricalParameterSpace": {
        "required": [
          "type",
          "name",
          "values"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "categorical"
            ]
          },
          "name": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NumericScale": {
        "type": "string",
        "enum": [
          "auto",
          "linear",
          "log",
          "reverseLog"
        ]
      },
      "NumericParameterSpace": {
        "required": [
          "name",
          "min",
          "max",
          "scale"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          },
          "scale": {
            "$ref": "#/components/schemas/NumericScale"
          }
        }
      },
      "ContinuousParameterSpace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NumericParameterSpace"
          },
          {
            "required": [
              "type"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "continuous"
                ]
              }
            }
          }
        ]
      },
      "IntegerParameterSpace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/NumericParameterSpace"
          },
          {
            "required": [
              "type"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "integer"
                ]
              }
            }
          }
        ]
      },
      "ParameterSpace": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CategoricalParameterSpace"
          },
          {
            "$ref": "#/components/schemas/ContinuousParameterSpace"
          },
          {
            "$ref": "#/components/schemas/IntegerParameterSpace"
          }
        ]
      },
      "OptimizationObjective": {
        "required": [
          "direction",
          "metric"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "direction": {
            "type": "string",
            "enum": [
              "minimize",
              "maximize"
            ]
          },
          "metric": {
            "type": "string"
          }
        }
      },
      "MetricDefinition": {
        "required": [
          "name",
          "regex"
        ],
        "additionalProperties": false,
        "description": "Camel-cased mirror of https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_MetricDefinition.html.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "regex": {
            "type": "string"
          }
        }
      },
      "TuningJobTrainingApproach": {
        "required": [
          "type",
          "trainingImage",
          "metricDefinitions",
          "objective",
          "searchSpace"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tuningJob"
            ]
          },
          "trainingImage": {
            "type": "string",
            "description": "An aws ecr image uri of the form <account-id>.dkr.ecr.<region>.amazonaws.com/<repo-name>:<tag>",
            "pattern": "^[0-9]+\\.dkr.ecr.[-a-z0-9]+\\.amazonaws\\.com\\/[-_a-zA-Z0-9]+:[-_a-zA-Z0-9]+$"
          },
          "metricDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetricDefinition"
            }
          },
          "objective": {
            "description": "The metric to optimize during the hyperparameter tuning process.",
            "$ref": "#/components/schemas/OptimizationObjective"
          },
          "searchSpace": {
            "description": "The hyperparameter search space to explore during hyperparameter tuning.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterSpace"
            }
          },
          "maxTrials": {
            "description": "The maximum number of candidate models to consider in a given model run.",
            "type": "integer",
            "minimum": 1,
            "maximum": 30
          }
        }
      },
      "TrainingApproach": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/TuningJobTrainingApproach"
          }
        ]
      },
      "DeployApproachBase": {
        "required": [
          "inferenceImage"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "inferenceImage": {
            "type": "string",
            "description": "An aws ecr image uri of the form <account-id>.dkr.ecr.<region>.amazonaws.com/<repo-name>:<tag>",
            "pattern": "^[0-9]+\\.dkr.ecr.[-a-z0-9]+\\.amazonaws\\.com\\/[-_a-zA-Z0-9]+:[-_a-zA-Z0-9]+$"
          }
        }
      },
      "EdgeDeployApproach": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeployApproachBase"
          },
          {
            "required": [
              "type"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "edge"
                ]
              }
            }
          }
        ]
      },
      "CloudDeployApproach": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DeployApproachBase"
          },
          {
            "required": [
              "type"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "cloud"
                ]
              }
            }
          }
        ]
      },
      "DeployApproach": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/EdgeDeployApproach"
          },
          {
            "$ref": "#/components/schemas/CloudDeployApproach"
          }
        ]
      },
      "EvaluationApproach": {
        "required": [
          "type",
          "imageUri"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "customImage"
            ]
          },
          "imageUri": {
            "type": "string",
            "description": "An aws ecr image uri of the form <account-id>.dkr.ecr.<region>.amazonaws.com/<repo-name>:<tag>",
            "pattern": "^[0-9]+\\.dkr.ecr.[-a-z0-9]+\\.amazonaws\\.com\\/[-_a-zA-Z0-9]+:[-_a-zA-Z0-9]+$"
          }
        }
      },
      "ModelConfigBase": {
        "required": [
          "name",
          "description",
          "trainingApproach",
          "deployApproach"
        ],
        "additionalProperties": true,
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "trainingApproach": {
            "$ref": "#/components/schemas/TrainingApproach"
          },
          "deployApproach": {
            "$ref": "#/components/schemas/DeployApproach"
          },
          "evaluationApproach": {
            "$ref": "#/components/schemas/EvaluationApproach"
          }
        }
      },
      "ModelConfigInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelConfigBase"
          },
          {
            "required": [
              "problemDefinition"
            ],
            "additionalProperties": true,
            "type": "object",
            "properties": {
              "problemDefinition": {
                "$ref": "#/components/schemas/MlProblemDefinitionInput"
              }
            }
          }
        ]
      },
      "ModelConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ModelConfigBase"
          },
          {
            "required": [
              "id",
              "accountId",
              "problemDefinition"
            ],
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "id": {
                "description": "UUID uniquely identifying this model config.",
                "type": "string"
              },
              "accountId": {
                "type": "string"
              },
              "problemDefinition": {
                "$ref": "#/components/schemas/MlProblemDefinition"
              },
              "deployedId": {
                "description": "The ID of the model version currently deployed for this model config.\n@deprecated use championId instead",
                "type": "string"
              },
              "championId": {
                "description": "The ID of the champion model run for this model config.",
                "type": "string"
              }
            }
          }
        ]
      },
      "Split": {
        "required": [
          "n",
          "start",
          "end",
          "uri"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "n": {
            "description": "The number of examples in this split.",
            "type": "number"
          },
          "start": {
            "description": "Timestamp marking the beginning of the data for this split (inclusive). Expressed as milliseconds since the UTC epoch.",
            "type": "number"
          },
          "end": {
            "description": "Timestamp marking the end of the data for this split (exclusive). Expressed as milliseconds since the UTC epoch.",
            "type": "number"
          },
          "uri": {
            "description": "S3 URI of where a copy of this exact split is saved.",
            "type": "string",
            "pattern": "^s3:\\/\\/.+$"
          }
        }
      },
      "Metric": {
        "required": [
          "name",
          "value",
          "stage"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the metric e.g. \"Cross Entopy Loss\", \"Accuracy\", \"F1 Macro\", etc.",
            "type": "string"
          },
          "value": {
            "type": "number"
          },
          "stage": {
            "description": "The stage of the model run this metric was computed in. If `training`, the metric could have been computed over the train or val set. If `evaluation`, the metric was computed over the test set.",
            "type": "string",
            "enum": [
              "training",
              "evaluation"
            ]
          }
        }
      },
      "ApprovalChoice": {
        "type": "string",
        "enum": [
          "approved",
          "rejected"
        ]
      },
      "ApprovalDecisionBase": {
        "required": [
          "timestamp",
          "decision"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "timestamp": {
            "description": "Timestamp of when the decision was made. Expressed as milliseconds since the UTC epoch.",
            "type": "number"
          },
          "decision": {
            "$ref": "#/components/schemas/ApprovalChoice"
          }
        }
      },
      "SystemApprovalDecision": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApprovalDecisionBase"
          },
          {
            "required": [
              "actor"
            ],
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "actor": {
                "type": "string",
                "enum": [
                  "system"
                ]
              }
            }
          }
        ]
      },
      "UserApprovalDecision": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ApprovalDecisionBase"
          },
          {
            "required": [
              "actor",
              "user"
            ],
            "additionalProperties": false,
            "type": "object",
            "properties": {
              "actor": {
                "type": "string",
                "enum": [
                  "user"
                ]
              },
              "user": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ApprovalDecision": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/SystemApprovalDecision"
          },
          {
            "$ref": "#/components/schemas/UserApprovalDecision"
          }
        ]
      },
      "RunSplits": {
        "required": [
          "train",
          "val",
          "test"
        ],
        "additionalProperties": false,
        "description": "Information about the different splits of the dataset used to train this model version.",
        "type": "object",
        "properties": {
          "train": {
            "$ref": "#/components/schemas/Split"
          },
          "val": {
            "$ref": "#/components/schemas/Split"
          },
          "test": {
            "$ref": "#/components/schemas/Split"
          }
        }
      },
      "RunMetrics": {
        "required": [
          "challenger",
          "champion"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "challenger": {
            "description": "Metrics about how the model version trained in this run (the challenger) performed on this run's test set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metric"
            }
          },
          "champion": {
            "description": "Metrics about how the current best model (the champion) performed on this run's test set.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metric"
            }
          }
        }
      },
      "Parameter": {
        "required": [
          "name",
          "value"
        ],
        "additionalProperties": false,
        "description": "A hyperparameter value. The values themselves are represented as strings.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ModelRun": {
        "required": [
          "id",
          "slug",
          "modelId",
          "accountId",
          "status",
          "start",
          "hyperparameters",
          "metrics",
          "approvals",
          "problemDefinition",
          "trainingApproach",
          "deployApproach"
        ],
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "id": {
            "description": "UUID uniquely identifying this model run.",
            "type": "string"
          },
          "slug": {
            "description": "Human-readable slug that acts as an auto-generated name for the run. This field is not guaranteed to be unique, so cannot be used reliably as a unique identifier.",
            "type": "string"
          },
          "modelId": {
            "description": "ID of the model config this run was produced for.",
            "type": "string"
          },
          "accountId": {
            "type": "string"
          },
          "modelArtifactUri": {
            "description": "S3 URI location where the final trained model artifact produced by this run is saved to.",
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "running",
              "succeeded",
              "failed"
            ]
          },
          "error": {
            "description": "If `status` is 'failed', gives the reason why the run failed.",
            "type": "string"
          },
          "deployStatus": {
            "type": "string",
            "enum": [
              "deploying",
              "succeeded",
              "failed"
            ]
          },
          "deployError": {
            "description": "If `deployStatus` is 'failed', gives the reason why deploying the model endpoint failed",
            "type": "string"
          },
          "start": {
            "description": "Timestamp of when the run started. Expressed as milliseconds since the UTC epoch.",
            "type": "number"
          },
          "end": {
            "description": "Timestamp of when the run ended. Expressed as milliseconds since the UTC epoch.",
            "type": "number"
          },
          "isArchived": {
            "type": "boolean",
            "description": "True if this run has been archived. Archived runs' related artifacts are deleted, and they can no longer be deployed."
          },
          "splits": {
            "$ref": "#/components/schemas/RunSplits"
          },
          "hyperparameters": {
            "description": "The hyperparameters used to train the model version created by this run.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          },
          "championId": {
            "description": "The ID of the model run that was the current champion while this model run was running. All champion metrics on this model run represent that champion's performance on this run's dataset.",
            "type": "string"
          },
          "metrics": {
            "$ref": "#/components/schemas/RunMetrics"
          },
          "approvals": {
            "description": "Decisions made by various actors representing whether they think this model version should be used in production and become the new champion.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApprovalDecision"
            }
          },
          "problemDefinition": {
            "$ref": "#/components/schemas/MlProblemDefinition"
          },
          "trainingApproach": {
            "$ref": "#/components/schemas/TrainingApproach"
          },
          "deployApproach": {
            "$ref": "#/components/schemas/DeployApproach"
          },
          "evaluationApproach": {
            "$ref": "#/components/schemas/EvaluationApproach"
          }
        }
      },
      "LogEvent": {
        "required": [
          "type",
          "timestamp",
          "payload",
          "stage"
        ],
        "additionalProperties": false,
        "description": "An event logged by some component of a model run, as well as metadata about the log event.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "logEntry"
            ]
          },
          "timestamp": {
            "description": "The time when the log event occurred, expressed as milliseconds since the unix epoch.",
            "type": "number"
          },
          "payload": {
            "description": "The actual body of the logged event.",
            "type": "string"
          },
          "stage": {
            "description": "The model run's stage or component that produced this log event.",
            "type": "string"
          }
        }
      }
    }
  },
  "paths": {
    "/models": {
      "post": {
        "operationId": "createModel",
        "description": "Creates a new model via a model config object.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "model"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "model": {
                      "$ref": "#/components/schemas/ModelConfig"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelConfigInput"
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getModels",
        "description": "Gets all model configs for an account.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "models"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "models": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ModelConfig"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/models/{id}": {
      "put": {
        "operationId": "updateModel",
        "description": "Updates a model config.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "model"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "model": {
                      "$ref": "#/components/schemas/ModelConfig"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelConfigInput"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "delete": {
        "operationId": "deleteModel",
        "description": "Deletes a model.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "id"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The id of the model that was deleted.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "getModel",
        "description": "Gets a model config.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "model": {
                      "$ref": "#/components/schemas/ModelConfig"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/models/{modelId}/runs": {
      "post": {
        "operationId": "createRun",
        "description": "Begins a new ML run for a given model.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "runId"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "runId": {
                      "description": "The id of the newly created run. Can be used to fetch data about the run.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {}
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "get": {
        "operationId": "getRuns",
        "description": "Gets data for all ML runs for a model.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "runs"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "runs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ModelRun"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/models/{modelId}/runs/{runId}": {
      "get": {
        "operationId": "getRun",
        "description": "Gets data for a particular run.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "run": {
                      "$ref": "#/components/schemas/ModelRun"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "runId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/models/{modelId}/runs/{runId}/model-artifact": {
      "get": {
        "operationId": "getModelArtifact",
        "description": "Gets a url that can be used to download the model artifact for a particular run.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "url"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "url": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "runId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/models/{modelId}/runs/{runId}/logs": {
      "get": {
        "operationId": "getModelLogs",
        "description": "Gets the log events for a particular run.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "events"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LogEvent"
                      }
                    },
                    "marker": {
                      "description": "A marker used for pagination. Pass it in the request body to retrieve the next page of results. This field will be undefined if the output is not truncated.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "runId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "filter",
            "description": "An optional field used to filter the log events. This parameter supports AWS CloudWatch Logs' filter and pattern syntax. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html for instructions on how to write filters.",
            "schema": {
              "description": "An optional field used to filter the log events. This parameter supports AWS CloudWatch Logs' filter and pattern syntax. See https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html for instructions on how to write filters.",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "marker",
            "description": "Passed in to control which page of results is retrieved.",
            "schema": {
              "description": "Passed in to control which page of results is retrieved.",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The maximum number of events to return. The default is to return 10,000 -- the largest allowed.",
            "schema": {
              "description": "The maximum number of events to return. The default is to return 10,000 -- the largest allowed.",
              "type": "integer",
              "minimum": 1,
              "maximum": 10000
            },
            "required": false
          }
        ]
      }
    },
    "/models/{modelId}/runs/{runId}/approvals": {
      "post": {
        "operationId": "createApprovalDecision",
        "description": "Adds a new approval decision to a model run.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "approvalDecision"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "approvalDecision": {
                      "$ref": "#/components/schemas/UserApprovalDecision"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "choice"
                ],
                "additionalProperties": false,
                "type": "object",
                "properties": {
                  "choice": {
                    "$ref": "#/components/schemas/ApprovalChoice"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "runId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/models/{modelId}/examples": {
      "get": {
        "operationId": "getExamples",
        "description": "Fetches a page of training data examples for data labeling.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "examples"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "examples": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Example"
                      }
                    },
                    "marker": {
                      "description": "A marker used for pagination. Pass it in the request body to retrieve the next page of results. This field will be undefined if the output is not truncated.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "hasLabel",
            "schema": {
              "type": "string",
              "enum": [
                "true",
                "false"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "hasUnconfirmedLabel",
            "description": "Allows for fetching examples that have unconfirmed labels.",
            "schema": {
              "type": "string",
              "description": "Allows for fetching examples that have unconfirmed labels.",
              "enum": [
                "true",
                "false"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "marker",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "patientId",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ]
      }
    },
    "/models/{modelId}/examples/{exampleId}": {
      "get": {
        "operationId": "getExample",
        "description": "Fetches a single training data example for data labeling.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "example": {
                      "$ref": "#/components/schemas/Example"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "exampleId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "projectId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/models/{modelId}/examples/{exampleId}/label": {
      "put": {
        "operationId": "putLabel",
        "description": "Updates the label for a training data example",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Example"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "exampleId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    },
    "/models/{modelId}/examples/{exampleId}/label-file": {
      "get": {
        "operationId": "getLabelFile",
        "description": "Retrieves the label file for the given example, if it exists, and converts it to the format LabelStudio expects.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "labelData": {
                      "$ref": "#/components/schemas/LabelFileData"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "exampleId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      },
      "put": {
        "operationId": "putLabelFile",
        "description": "Preprocesses the label data and updates the label file for a training data example. This is done for ML problem types that store their labels as independent files, such as image segmentation. For those problem types, The label data is not stored on a label FHIR record, but in a separate file-service file, and pointed to by a label FHIR record.",
        "responses": {
          "200": {
            "description": "A successful response",
            "content": {
              "application/json": {
                "schema": {
                  "required": [
                    "fileId"
                  ],
                  "additionalProperties": false,
                  "type": "object",
                  "properties": {
                    "fileId": {
                      "description": "The id of the file-service file the label file was saved to.",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelFileData"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "exampleId",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ]
      }
    }
  }
}